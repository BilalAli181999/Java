
import static java.lang.System.exit;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author najam
 */

public class AddGBill extends javax.swing.JFrame {
    int gid;
    int noNames=0;
    int noMid=0;
    double amount=0;
    double percent=100;
    GroupView refg;
    /**
     * Creates new form MainPage
     */
    public AddGBill(int gid) throws Exception {
       
        initComponents();
        this.gid=gid;
       
        setComboBox();
    }

    private AddGBill() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public int getMemberCount()
    {
        return jComboBox2.getItemCount();
    }
     public  void setGroupName(String s)
    {
        jTextPane1.setText(s);
    }
     public int getGId() throws Exception
  { 
     
      String sql="Select * from Groups";
      Connection conn = this.connectDatabase();
      PreparedStatement pstmt = conn.prepareStatement(sql) ;
          
              
        ResultSet rs = pstmt.executeQuery();
          rs.last();
        return rs.getInt("GId");
      
  }
        public int getEventId() throws Exception
  { 
     
      String sql="Select * from GBills";
      Connection conn = this.connectDatabase();
      PreparedStatement pstmt = conn.prepareStatement(sql) ;
          
              
        ResultSet rs = pstmt.executeQuery();
        
        if(rs.last())
        return rs.getInt("EventId")+1;
        else return 1;
      
  }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     * @throws java.lang.Exception
     */
   public void setComboBox()
   {
      
       try {
            Connection con = this.connectDatabase();
            PreparedStatement stmt = con.prepareStatement("Select * from GMembers where GId=?");
            stmt.setInt(1, gid);
            
            ResultSet rs = stmt.executeQuery();
          
        while(rs.next()) 
        {
            
            String name=rs.getString("Name");
           
            jComboBox2.addItem(name);
        }
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }       
   }
    public static  Connection connectDatabase() throws Exception
{
    Connection con;
    PreparedStatement stmt;
    ResultSet rs;
   
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:8080/splitwise", "root", "");
       
      
        return con;
       
    
}
    public String getName()
    {
        noNames++;
      String sql="Select * from GMembers where GId=?";
      Connection conn = null;
        try {
            conn = this.connectDatabase();
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
      PreparedStatement pstmt = null ;
        try {
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1,gid);
        } catch (SQLException ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
          
              
        ResultSet rs = null;
        try {
            rs = pstmt.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            for(int i=0;i<noNames;i++)
            {rs.next();}
            
        } catch (SQLException ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
        String result = null;
        try {
            result= rs.getString("Name");
        } catch (SQLException ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
        
    }
      public String getMId()
    {
        noMid++;
      String sql="Select * from GMembers where GId=?";
      Connection conn = null;
        try {
            conn = this.connectDatabase();
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
      PreparedStatement pstmt = null ;
        try {
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1,gid);
        } catch (SQLException ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
          
              
        ResultSet rs = null;
        try {
            rs = pstmt.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            for(int i=0;i<noMid;i++)
            rs.next();
            
        } catch (SQLException ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
        String result = null;
        try {
            result= rs.getString("MId");
        } catch (SQLException ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
        return result;
        
    }
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField1 = new java.awt.TextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jComboBox3 = new javax.swing.JComboBox<>();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();

        textField1.setText("textField1");

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextArea1KeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(jTextArea1);

        jLabel2.setText("Enter Description");

        jLabel3.setText("Enter Total Amount");

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        jTextField1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField1KeyTyped(evt);
            }
        });

        jLabel4.setText("Paid By");

        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel5.setText("Slpit");

        jComboBox3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Equally", "UnEqually", "Split by Percentage" }));
        jComboBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox3ActionPerformed(evt);
            }
        });

        jLabel7.setText("Select Date");

        jLabel8.setText("Event Name");

        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });
        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 102, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Submit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel9.setText("With you:");

        jTextPane1.setEditable(false);
        jScrollPane3.setViewportView(jTextPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel2))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 307, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jButton2)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(jLabel4)
                                .addComponent(jLabel5)
                                .addComponent(jLabel7))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jComboBox3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(54, 54, 54)
                .addComponent(jButton2)
                .addGap(73, 73, 73))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox3ActionPerformed
       
        
    }//GEN-LAST:event_jComboBox3ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
 
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
      
        if(!(jTextField1.getText().equals("")) && !(jTextField2.getText().equals("")) && !(jDateChooser1.getDate()==null) && !(jTextArea1.getText().equals("")))
        {  
             amount=Double.parseDouble(jTextField1.getText());
            String sql = "INSERT INTO GBills(Gid,Name,Description,SplitBy,Amount,Date) VALUES(?,?,?,?,?,?)";
 
        try (Connection conn = this.connectDatabase();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1,  gid); 
            pstmt.setString(2, (String) jTextField2.getText()); 
             pstmt.setString(3, (String) jTextArea1.getText());
              pstmt.setDouble(5,Double.parseDouble(jTextField1.getText()));
              
              java.util.Date utilDate = (java.util.Date) jDateChooser1.getDate();
              java.sql.Date sqlDate = new java.sql.Date(utilDate.getTime());
              pstmt.setDate(6, sqlDate);
             
              pstmt.setString(4, (String) jComboBox3.getSelectedItem());
            
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
        int groupId=0;
        int eventId=0;
       
        try {   
             groupId=gid;
             eventId=getEventId()-1;
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        }
 for (int i=0;i<jComboBox2.getItemCount();i++){
     sql = "INSERT INTO GBillMembers(GId,EventId,Name,MId,Divident,Paid,ToReceive,Owes) VALUES(?,?,?,?,?,?,?,?)";
    
        try (Connection conn = this.connectDatabase();
            
                
            PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1,  groupId); 
            pstmt.setInt(2,eventId); 
            
            String Name=getName();
            String mid=getMId();
            pstmt.setString(3, Name);
            pstmt.setString(4, mid);
            int memCount=jComboBox2.getItemCount();
            pstmt.setDouble(5,Double.parseDouble(jTextField1.getText())/memCount);
      
            
              double curPaid=0,divident = 0,receive = 0,owes = 0;
              //split Equally
               if(jComboBox2.getSelectedItem().equals(Name))
              {
                  pstmt.setDouble(6, Double.parseDouble(jTextField1.getText()));
                  curPaid= Double.parseDouble(jTextField1.getText());
              }
              else
              {
                  pstmt.setDouble(6,0);
                  curPaid=0;
              }
              if(jComboBox3.getSelectedItem().equals("Equally")){
              divident=Double.parseDouble(jTextField1.getText())/memCount;
              
             
             if(curPaid>divident)
             {
                 receive=curPaid-divident;
                 owes=0;
             }
             else if(curPaid==0)
             {
                 owes=divident;
                 receive=0;
             }
             } 
              else if(jComboBox3.getSelectedItem().equals("UnEqually"))
              {
                   String memberList="0";
                  
                 if(amount>0)
                 memberList=JOptionPane.showInputDialog("RemainingAmount="+amount+"\nEnter the amount for "+jComboBox2.getItemAt(i));
         
                if(!(memberList.equals(""))&&Double.parseDouble(memberList)<=amount)
                { 
                    
                    if(curPaid==0)
                 {
                    
                     owes=Double.parseDouble(memberList);
                     receive=0;
   
                 }
                 else
                 {
                      
                     receive=curPaid-Double.parseDouble(memberList);
                     owes=0;
                   
                 }
                   if(!(memberList.equals(""))) 
                 { amount=amount-Double.parseDouble(memberList);}
               
                }  
                else
                {
                     if(curPaid==0 &&Double.parseDouble(memberList)>amount)
                         owes=amount;
                  if(curPaid!=0 && Double.parseDouble(memberList)>amount)
                         receive=curPaid-amount;
                         
                    amount=0;
                    JOptionPane optionPane = new JOptionPane("Invalid Amount \n Only Remaining Entered ", JOptionPane.ERROR_MESSAGE);    
           JDialog dialog = optionPane.createDialog("Failure");
           dialog.setAlwaysOnTop(true);
           dialog.setVisible(true);
         
          
           
         
          
                }
              }
              else if(jComboBox3.getSelectedItem().equals("Split by Percentage"))
              {
                     String memberList="0";
                  
                 if(percent>0)
                 memberList=JOptionPane.showInputDialog("Remaining="+percent+"%\nEnter the Percentage for "+jComboBox2.getItemAt(i));
         
                if(!(memberList.equals(""))&&Double.parseDouble(memberList)<=percent)
                { 
                    
                    if(curPaid==0)
                 {
                    
                      owes=((Double.parseDouble(memberList)/100)*Double.parseDouble(jTextField1.getText()));
                     receive=0;
   
                 }
                 else
                 {
                      
                     receive=curPaid-((Double.parseDouble(memberList)/100)*Double.parseDouble(jTextField1.getText()));
                     owes=0;
                   
                 }
                   if(!(memberList.equals(""))) 
                 { percent=percent-Double.parseDouble(memberList);}
               
                }  
                else
                {
                     if(!(memberList.equals(""))&&curPaid==0 &&Double.parseDouble(memberList)>percent)
                         owes=(percent/100)*Double.parseDouble(jTextField1.getText());
                  if(!(memberList.equals(""))&&curPaid!=0 && Double.parseDouble(memberList)>percent)
                         receive=curPaid-(percent/100)*Double.parseDouble(jTextField1.getText());
                         
                    percent=0;
                    JOptionPane optionPane = new JOptionPane("Invalid Amount \n Only Remaining Entered ", JOptionPane.ERROR_MESSAGE);    
           JDialog dialog = optionPane.createDialog("Failure");
           dialog.setAlwaysOnTop(true);
           dialog.setVisible(true);
         
          
           
         
              }
              }
             
             pstmt.setDouble(7, receive);
             pstmt.setDouble(8, owes);
            
            pstmt.executeUpdate();
           
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
            this.dispose();
           
        }
        
 }  
         JOptionPane.showMessageDialog(this,"Successfully Added");
            this.dispose();
            
             refg.setVisible(true);
             refg.setTable();
        } 
        else
{
 {JOptionPane optionPane = new JOptionPane("Fill All Fields", JOptionPane.ERROR_MESSAGE);    
           JDialog dialog = optionPane.createDialog("Failure");
           dialog.setAlwaysOnTop(true);
           dialog.setVisible(true);}
}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jTextField1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField1KeyTyped
      char ch=evt.getKeyChar();
      if(!(ch>='0' && ch<='9' || ch==evt.VK_BACK_SPACE ))
      {
          
          evt.consume();
      }
    }//GEN-LAST:event_jTextField1KeyTyped

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        if(jTextField2.getText().length()>=20)
        { 
            evt.consume();
        }
        char ch=evt.getKeyChar();
         if(jTextField2.getText().length()==0 && ch==' ')
        { 
            evt.consume();
        }
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jTextArea1KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextArea1KeyTyped
        // TODO add your handling code here:
         if(jTextArea1.getText().length()>=200)
        {  
            evt.consume();
        }
         char ch=evt.getKeyChar();
         if(jTextArea1.getText().length()==0 && ch==' ')
        { 
            evt.consume();
        }
         
    }//GEN-LAST:event_jTextArea1KeyTyped

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AddGBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AddGBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AddGBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AddGBill.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new AddGBill().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JComboBox<String> jComboBox3;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextPane jTextPane1;
    private java.awt.TextField textField1;
    // End of variables declaration//GEN-END:variables
}
