
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author najam
 */
public final class Balances extends javax.swing.JFrame {

    /**
     * Creates new form Balances
     */
    GroupView refg;
    int groupId=0;
    int eventId=0;
    String payer="";
    Vector<String> colName;
Vector<Vector<Object>> tbData;
    public Balances(int gid,int eid, GroupView ref) throws Exception {
        initComponents();
        groupId=gid;
        eventId=eid;
        refg=ref;
        payer=getPayer();
        setEventName();
        setTable();
    }

    Balances() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    public void setEventName() throws Exception
    {
        String sql = "Select * from gbills where Gid=? AND EventId=?";
     
        try (Connection conn = this.connectDatabase();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1,groupId);
pstmt.setInt(2, eventId);
                    
        ResultSet rs = pstmt.executeQuery();

if(rs.next())
{
  jTextField1.setText(rs.getString("Name"));
    
    
}  
              
            
        }
        
         
    }
     ResultSet rs=null;
    /**
     * Creates new form GroupPanel
     */

     public static  Connection connectDatabase() throws Exception
{
    Connection con;
    PreparedStatement stmt;
    ResultSet rs;
   
        Class.forName("com.mysql.jdbc.Driver");
        con = DriverManager.getConnection("jdbc:mysql://localhost:8080/splitwise", "root", "");
       
     
        return con;
       
    
}
     public String getPayer() throws SQLException, Exception
     {
          String sql = "Select * from gbillmembers where Gid=? AND EventId=? AND paid!=0";
        String pay="";
        try (Connection conn = this.connectDatabase();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1,groupId);
pstmt.setInt(2, eventId);
                   
        ResultSet rs = pstmt.executeQuery();

while(rs.next())
{
  pay=rs.getString("Name");
}  
              
            
        }
        return pay;
         
     }
public String setRow(String s,Double p,Double r,Double o)
{
    String str="";
      if(p!=0){
      
        str=s+" receives "+r+" in total from group members\n";
      }  
    else
      {
      str=s+" owes "+o+" to "+payer+"\n";
      }
    
    return str;
    
}
 public DefaultTableModel makeTable(ResultSet rs)
    {   
        
        
        try {
               
            ResultSetMetaData rsMeta = rs.getMetaData();
            
    
           
             colName = new Vector<String>();
   
                
                colName.add("Balance");
           
            
            tbData = new Vector<Vector<Object>>();
            
            while(rs.next())
            {
                Vector<Object> row = new Vector<Object>();
                
          
                    row.add(setRow(rs.getString("Name"),rs.getDouble("Paid"),rs.getDouble("ToReceive"),rs.getDouble("Owes")));
                
                tbData.add(row);
            }
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        
        return new DefaultTableModel(tbData, colName);
    }
     public void setTable()
    {
        String sql = "Select * from gbillmembers where Gid=? AND EventId=?";
        
        try (Connection conn = this.connectDatabase();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setInt(1,groupId);
pstmt.setInt(2, eventId);
      ResultSet rs = pstmt.executeQuery();
        DefaultTableModel model=this.makeTable(rs);
        jTable1.setModel(model);
       
    
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        } catch (Exception ex) {
            Logger.getLogger(AddGBill.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(0, 204, 204));

        jButton1.setBackground(new java.awt.Color(255, 102, 102));
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField1.setEditable(false);
        jTextField1.setBackground(new java.awt.Color(0, 204, 204));
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setBorder(null);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jButton1)
                .addGap(77, 77, 77)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(159, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 24, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));

        jTable1.setRowHeight(30);
        jTable1.setRowMargin(3);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jButton2.setBackground(new java.awt.Color(255, 102, 102));
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("SETTLE UP");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(0, 50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        
        refg.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    public void updateQuery(String Name,Double p,Double r,Double o) throws Exception
    {
         String sql = "update gbillmembers  set Paid=? ,ToReceive=?,Owes=? where GId=? and EventId=? and Name=?";
      
        try (Connection conn = this.connectDatabase();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
           
      pstmt.setDouble(1,p);
      pstmt.setDouble(2,r);
      pstmt.setDouble(3,o);
      pstmt.setString(6,Name);
      pstmt.setInt(4,groupId);
      pstmt.setInt(5,eventId);
     
      
      int count = pstmt.executeUpdate();
     
          
    
         
    }
    }
    public void settleUp() throws SQLException, Exception{
    
        String sql = "Select * from gbillmembers where GId=? and EventId=?";
      
        try (Connection conn = this.connectDatabase();
                PreparedStatement pstmt = conn.prepareStatement(sql)) {
            
      pstmt.setInt(1,groupId);
      pstmt.setInt(2,eventId);
     
      
      ResultSet rs = pstmt.executeQuery();
      Double paid,receive,owe;
      while(rs.next())
      {
          paid= rs.getDouble("Paid");
          receive= rs.getDouble("ToReceive");
          owe= rs.getDouble("Owes");
         if(paid!=0)
         {
             updateQuery(rs.getString("Name"),paid-receive,0.0,0.0);
         }
         else
         {
             updateQuery(rs.getString("Name"),owe,0.0,0.0);
         }
      }
      JOptionPane.showMessageDialog (null, "Successfully Settled Up", "Settle Up", JOptionPane.INFORMATION_MESSAGE);
         
    }}
    
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
                            
    }//GEN-LAST:event_jTable1MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         int input = JOptionPane.showConfirmDialog(null, "Do you want to Settle Up?");
         if(input==0)
         {
             try {
                 settleUp();
                 this.dispose();
                 refg.setVisible(true);
             } catch (Exception ex) {
                 Logger.getLogger(Balances.class.getName()).log(Level.SEVERE, null, ex);
             }
         }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Balances.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Balances.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Balances.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Balances.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    new Balances().setVisible(true);
                } catch (Exception ex) {
                    Logger.getLogger(Balances.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
